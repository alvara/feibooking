/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * payload
 * A blank template to get started with Payload
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  DeletePayloadMigrationsIdParams,
  DeletePayloadMigrationsParams,
  GetPayloadMigrationsIdParams,
  GetPayloadMigrationsParams,
  NotFoundErrorResponseResponse,
  PatchPayloadMigrationsIdParams,
  PatchPayloadMigrationsParams,
  PayloadMigrationsBulkResponseResponse,
  PayloadMigrationsRequestBody,
  PayloadMigrationsResponseResponse,
  PayloadMigrationsUpsertConfirmationResponseResponse,
  PayloadMigrationssResponseResponse,
  PostPayloadMigrationsParams,
} from './model';

/**
 * Find paginated Payload Migrations
 * @summary Find paginated Payload Migrations
 */
export const getPayloadMigrations = (
  params?: GetPayloadMigrationsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadMigrationssResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/payload-migrations`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetPayloadMigrationsQueryKey = (params?: GetPayloadMigrationsParams) => {
  return [`http://localhost:3001/api/payload-migrations`, ...(params ? [params] : [])] as const;
};

export const getGetPayloadMigrationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPayloadMigrations>>,
  TError = AxiosError<unknown>,
>(
  params?: GetPayloadMigrationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadMigrations>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPayloadMigrationsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPayloadMigrations>>> = ({ signal }) =>
    getPayloadMigrations(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPayloadMigrations>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPayloadMigrationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPayloadMigrations>>
>;
export type GetPayloadMigrationsQueryError = AxiosError<unknown>;

export function useGetPayloadMigrations<
  TData = Awaited<ReturnType<typeof getPayloadMigrations>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetPayloadMigrationsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadMigrations>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getPayloadMigrations>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPayloadMigrations<
  TData = Awaited<ReturnType<typeof getPayloadMigrations>>,
  TError = AxiosError<unknown>,
>(
  params?: GetPayloadMigrationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadMigrations>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPayloadMigrations>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPayloadMigrations<
  TData = Awaited<ReturnType<typeof getPayloadMigrations>>,
  TError = AxiosError<unknown>,
>(
  params?: GetPayloadMigrationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadMigrations>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Find paginated Payload Migrations
 */

export function useGetPayloadMigrations<
  TData = Awaited<ReturnType<typeof getPayloadMigrations>>,
  TError = AxiosError<unknown>,
>(
  params?: GetPayloadMigrationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadMigrations>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPayloadMigrationsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new Payload Migration
 * @summary Create a new Payload Migration
 */
export const postPayloadMigrations = (
  payloadMigrationsRequestBody: PayloadMigrationsRequestBody,
  params?: PostPayloadMigrationsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadMigrationsUpsertConfirmationResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/payload-migrations`, payloadMigrationsRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostPayloadMigrationsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPayloadMigrations>>,
    TError,
    { data: PayloadMigrationsRequestBody; params?: PostPayloadMigrationsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPayloadMigrations>>,
  TError,
  { data: PayloadMigrationsRequestBody; params?: PostPayloadMigrationsParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPayloadMigrations>>,
    { data: PayloadMigrationsRequestBody; params?: PostPayloadMigrationsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postPayloadMigrations(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPayloadMigrationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPayloadMigrations>>
>;
export type PostPayloadMigrationsMutationBody = PayloadMigrationsRequestBody;
export type PostPayloadMigrationsMutationError = AxiosError<unknown>;

/**
 * @summary Create a new Payload Migration
 */
export const usePostPayloadMigrations = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPayloadMigrations>>,
    TError,
    { data: PayloadMigrationsRequestBody; params?: PostPayloadMigrationsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postPayloadMigrations>>,
  TError,
  { data: PayloadMigrationsRequestBody; params?: PostPayloadMigrationsParams },
  TContext
> => {
  const mutationOptions = getPostPayloadMigrationsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update all Payload Migrations matching the where query
 * @summary Update multiple Payload Migrations
 */
export const patchPayloadMigrations = (
  payloadMigrationsRequestBody: PayloadMigrationsRequestBody,
  params: PatchPayloadMigrationsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadMigrationsBulkResponseResponse>> => {
  return axios.patch(`http://localhost:3001/api/payload-migrations`, payloadMigrationsRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPatchPayloadMigrationsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchPayloadMigrations>>,
    TError,
    { data: PayloadMigrationsRequestBody; params: PatchPayloadMigrationsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchPayloadMigrations>>,
  TError,
  { data: PayloadMigrationsRequestBody; params: PatchPayloadMigrationsParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchPayloadMigrations>>,
    { data: PayloadMigrationsRequestBody; params: PatchPayloadMigrationsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return patchPayloadMigrations(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchPayloadMigrationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchPayloadMigrations>>
>;
export type PatchPayloadMigrationsMutationBody = PayloadMigrationsRequestBody;
export type PatchPayloadMigrationsMutationError = AxiosError<unknown>;

/**
 * @summary Update multiple Payload Migrations
 */
export const usePatchPayloadMigrations = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchPayloadMigrations>>,
    TError,
    { data: PayloadMigrationsRequestBody; params: PatchPayloadMigrationsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchPayloadMigrations>>,
  TError,
  { data: PayloadMigrationsRequestBody; params: PatchPayloadMigrationsParams },
  TContext
> => {
  const mutationOptions = getPatchPayloadMigrationsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete all Payload Migrations matching the where query
 * @summary Delete multiple Payload Migrations
 */
export const deletePayloadMigrations = (
  params: DeletePayloadMigrationsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadMigrationsBulkResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/payload-migrations`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeletePayloadMigrationsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePayloadMigrations>>,
    TError,
    { params: DeletePayloadMigrationsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePayloadMigrations>>,
  TError,
  { params: DeletePayloadMigrationsParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePayloadMigrations>>,
    { params: DeletePayloadMigrationsParams }
  > = (props) => {
    const { params } = props ?? {};

    return deletePayloadMigrations(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePayloadMigrationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePayloadMigrations>>
>;

export type DeletePayloadMigrationsMutationError = AxiosError<unknown>;

/**
 * @summary Delete multiple Payload Migrations
 */
export const useDeletePayloadMigrations = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePayloadMigrations>>,
    TError,
    { params: DeletePayloadMigrationsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deletePayloadMigrations>>,
  TError,
  { params: DeletePayloadMigrationsParams },
  TContext
> => {
  const mutationOptions = getDeletePayloadMigrationsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a single Payload Migration by its id
 * @summary Get a single Payload Migration by its id
 */
export const getPayloadMigrationsId = (
  id: string,
  params?: GetPayloadMigrationsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadMigrationsResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/payload-migrations/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetPayloadMigrationsIdQueryKey = (
  id: string,
  params?: GetPayloadMigrationsIdParams,
) => {
  return [
    `http://localhost:3001/api/payload-migrations/${id}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPayloadMigrationsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPayloadMigrationsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetPayloadMigrationsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadMigrationsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPayloadMigrationsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPayloadMigrationsId>>> = ({ signal }) =>
    getPayloadMigrationsId(id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPayloadMigrationsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPayloadMigrationsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPayloadMigrationsId>>
>;
export type GetPayloadMigrationsIdQueryError = AxiosError<NotFoundErrorResponseResponse>;

export function useGetPayloadMigrationsId<
  TData = Awaited<ReturnType<typeof getPayloadMigrationsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params: undefined | GetPayloadMigrationsIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadMigrationsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPayloadMigrationsId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPayloadMigrationsId<
  TData = Awaited<ReturnType<typeof getPayloadMigrationsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetPayloadMigrationsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadMigrationsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPayloadMigrationsId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPayloadMigrationsId<
  TData = Awaited<ReturnType<typeof getPayloadMigrationsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetPayloadMigrationsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadMigrationsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a single Payload Migration by its id
 */

export function useGetPayloadMigrationsId<
  TData = Awaited<ReturnType<typeof getPayloadMigrationsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetPayloadMigrationsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadMigrationsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPayloadMigrationsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a Payload Migration
 * @summary Updates a Payload Migration
 */
export const patchPayloadMigrationsId = (
  id: string,
  payloadMigrationsRequestBody: PayloadMigrationsRequestBody,
  params?: PatchPayloadMigrationsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadMigrationsUpsertConfirmationResponseResponse>> => {
  return axios.patch(
    `http://localhost:3001/api/payload-migrations/${id}`,
    payloadMigrationsRequestBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getPatchPayloadMigrationsIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchPayloadMigrationsId>>,
    TError,
    { id: string; data: PayloadMigrationsRequestBody; params?: PatchPayloadMigrationsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchPayloadMigrationsId>>,
  TError,
  { id: string; data: PayloadMigrationsRequestBody; params?: PatchPayloadMigrationsIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchPayloadMigrationsId>>,
    { id: string; data: PayloadMigrationsRequestBody; params?: PatchPayloadMigrationsIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return patchPayloadMigrationsId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchPayloadMigrationsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchPayloadMigrationsId>>
>;
export type PatchPayloadMigrationsIdMutationBody = PayloadMigrationsRequestBody;
export type PatchPayloadMigrationsIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Updates a Payload Migration
 */
export const usePatchPayloadMigrationsId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchPayloadMigrationsId>>,
    TError,
    { id: string; data: PayloadMigrationsRequestBody; params?: PatchPayloadMigrationsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchPayloadMigrationsId>>,
  TError,
  { id: string; data: PayloadMigrationsRequestBody; params?: PatchPayloadMigrationsIdParams },
  TContext
> => {
  const mutationOptions = getPatchPayloadMigrationsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Deletes an existing Payload Migration
 * @summary Deletes an existing Payload Migration
 */
export const deletePayloadMigrationsId = (
  id: string,
  params?: DeletePayloadMigrationsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadMigrationsUpsertConfirmationResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/payload-migrations/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeletePayloadMigrationsIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePayloadMigrationsId>>,
    TError,
    { id: string; params?: DeletePayloadMigrationsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePayloadMigrationsId>>,
  TError,
  { id: string; params?: DeletePayloadMigrationsIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePayloadMigrationsId>>,
    { id: string; params?: DeletePayloadMigrationsIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deletePayloadMigrationsId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePayloadMigrationsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePayloadMigrationsId>>
>;

export type DeletePayloadMigrationsIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Deletes an existing Payload Migration
 */
export const useDeletePayloadMigrationsId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePayloadMigrationsId>>,
    TError,
    { id: string; params?: DeletePayloadMigrationsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deletePayloadMigrationsId>>,
  TError,
  { id: string; params?: DeletePayloadMigrationsIdParams },
  TContext
> => {
  const mutationOptions = getDeletePayloadMigrationsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
