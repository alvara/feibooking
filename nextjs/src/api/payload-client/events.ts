/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * payload
 * A blank template to get started with Payload
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  DeleteEventsIdParams,
  DeleteEventsParams,
  EventsBulkResponseResponse,
  EventsRequestBody,
  EventsResponseResponse,
  EventsUpsertConfirmationResponseResponse,
  EventsVersionResponseResponse,
  EventsVersionsResponseResponse,
  EventssResponseResponse,
  GetEventsIdParams,
  GetEventsParams,
  GetEventsVersionsIdParams,
  GetEventsVersionsParams,
  NotFoundErrorResponseResponse,
  PatchEventsIdParams,
  PatchEventsParams,
  PostEventsParams,
  PostEventsVersionsIdParams,
} from './model';

/**
 * Find paginated Events
 * @summary Find paginated Events
 */
export const getEvents = (
  params?: GetEventsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventssResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/events`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetEventsQueryKey = (params?: GetEventsParams) => {
  return [`http://localhost:3001/api/events`, ...(params ? [params] : [])] as const;
};

export const getGetEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = AxiosError<unknown>,
>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvents>>> = ({ signal }) =>
    getEvents(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEvents>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>;
export type GetEventsQueryError = AxiosError<unknown>;

export function useGetEvents<
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetEventsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEvents<
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = AxiosError<unknown>,
>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEvents<
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = AxiosError<unknown>,
>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Find paginated Events
 */

export function useGetEvents<
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = AxiosError<unknown>,
>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetEventsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new Event
 * @summary Create a new Event
 */
export const postEvents = (
  eventsRequestBody: EventsRequestBody,
  params?: PostEventsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventsUpsertConfirmationResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/events`, eventsRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostEventsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postEvents>>,
    TError,
    { data: EventsRequestBody; params?: PostEventsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postEvents>>,
  TError,
  { data: EventsRequestBody; params?: PostEventsParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postEvents>>,
    { data: EventsRequestBody; params?: PostEventsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postEvents(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostEventsMutationResult = NonNullable<Awaited<ReturnType<typeof postEvents>>>;
export type PostEventsMutationBody = EventsRequestBody;
export type PostEventsMutationError = AxiosError<unknown>;

/**
 * @summary Create a new Event
 */
export const usePostEvents = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postEvents>>,
    TError,
    { data: EventsRequestBody; params?: PostEventsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postEvents>>,
  TError,
  { data: EventsRequestBody; params?: PostEventsParams },
  TContext
> => {
  const mutationOptions = getPostEventsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update all Events matching the where query
 * @summary Update multiple Events
 */
export const patchEvents = (
  eventsRequestBody: EventsRequestBody,
  params: PatchEventsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventsBulkResponseResponse>> => {
  return axios.patch(`http://localhost:3001/api/events`, eventsRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPatchEventsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchEvents>>,
    TError,
    { data: EventsRequestBody; params: PatchEventsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchEvents>>,
  TError,
  { data: EventsRequestBody; params: PatchEventsParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchEvents>>,
    { data: EventsRequestBody; params: PatchEventsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return patchEvents(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchEventsMutationResult = NonNullable<Awaited<ReturnType<typeof patchEvents>>>;
export type PatchEventsMutationBody = EventsRequestBody;
export type PatchEventsMutationError = AxiosError<unknown>;

/**
 * @summary Update multiple Events
 */
export const usePatchEvents = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchEvents>>,
    TError,
    { data: EventsRequestBody; params: PatchEventsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchEvents>>,
  TError,
  { data: EventsRequestBody; params: PatchEventsParams },
  TContext
> => {
  const mutationOptions = getPatchEventsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete all Events matching the where query
 * @summary Delete multiple Events
 */
export const deleteEvents = (
  params: DeleteEventsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventsBulkResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/events`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeleteEventsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEvents>>,
    TError,
    { params: DeleteEventsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteEvents>>,
  TError,
  { params: DeleteEventsParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteEvents>>,
    { params: DeleteEventsParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteEvents(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEventsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEvents>>>;

export type DeleteEventsMutationError = AxiosError<unknown>;

/**
 * @summary Delete multiple Events
 */
export const useDeleteEvents = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEvents>>,
    TError,
    { params: DeleteEventsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteEvents>>,
  TError,
  { params: DeleteEventsParams },
  TContext
> => {
  const mutationOptions = getDeleteEventsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a single Event by its id
 * @summary Get a single Event by its id
 */
export const getEventsId = (
  id: string,
  params?: GetEventsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventsResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/events/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetEventsIdQueryKey = (id: string, params?: GetEventsIdParams) => {
  return [`http://localhost:3001/api/events/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetEventsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetEventsIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventsId>>> = ({ signal }) =>
    getEventsId(id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEventsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEventsId>>>;
export type GetEventsIdQueryError = AxiosError<NotFoundErrorResponseResponse>;

export function useGetEventsId<
  TData = Awaited<ReturnType<typeof getEventsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params: undefined | GetEventsIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEventsId<
  TData = Awaited<ReturnType<typeof getEventsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetEventsIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEventsId<
  TData = Awaited<ReturnType<typeof getEventsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetEventsIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a single Event by its id
 */

export function useGetEventsId<
  TData = Awaited<ReturnType<typeof getEventsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetEventsIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetEventsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a Event
 * @summary Updates a Event
 */
export const patchEventsId = (
  id: string,
  eventsRequestBody: EventsRequestBody,
  params?: PatchEventsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventsUpsertConfirmationResponseResponse>> => {
  return axios.patch(`http://localhost:3001/api/events/${id}`, eventsRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPatchEventsIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchEventsId>>,
    TError,
    { id: string; data: EventsRequestBody; params?: PatchEventsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchEventsId>>,
  TError,
  { id: string; data: EventsRequestBody; params?: PatchEventsIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchEventsId>>,
    { id: string; data: EventsRequestBody; params?: PatchEventsIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return patchEventsId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchEventsIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchEventsId>>>;
export type PatchEventsIdMutationBody = EventsRequestBody;
export type PatchEventsIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Updates a Event
 */
export const usePatchEventsId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchEventsId>>,
    TError,
    { id: string; data: EventsRequestBody; params?: PatchEventsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchEventsId>>,
  TError,
  { id: string; data: EventsRequestBody; params?: PatchEventsIdParams },
  TContext
> => {
  const mutationOptions = getPatchEventsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Deletes an existing Event
 * @summary Deletes an existing Event
 */
export const deleteEventsId = (
  id: string,
  params?: DeleteEventsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventsUpsertConfirmationResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/events/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeleteEventsIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEventsId>>,
    TError,
    { id: string; params?: DeleteEventsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteEventsId>>,
  TError,
  { id: string; params?: DeleteEventsIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteEventsId>>,
    { id: string; params?: DeleteEventsIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteEventsId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEventsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEventsId>>>;

export type DeleteEventsIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Deletes an existing Event
 */
export const useDeleteEventsId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEventsId>>,
    TError,
    { id: string; params?: DeleteEventsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteEventsId>>,
  TError,
  { id: string; params?: DeleteEventsIdParams },
  TContext
> => {
  const mutationOptions = getDeleteEventsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Find and query paginated versions of Events
 * @summary Event versions
 */
export const getEventsVersions = (
  params?: GetEventsVersionsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventsVersionsResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/events/versions`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetEventsVersionsQueryKey = (params?: GetEventsVersionsParams) => {
  return [`http://localhost:3001/api/events/versions`, ...(params ? [params] : [])] as const;
};

export const getGetEventsVersionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventsVersions>>,
  TError = AxiosError<unknown>,
>(
  params?: GetEventsVersionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsVersions>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsVersionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventsVersions>>> = ({ signal }) =>
    getEventsVersions(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventsVersions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEventsVersionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventsVersions>>
>;
export type GetEventsVersionsQueryError = AxiosError<unknown>;

export function useGetEventsVersions<
  TData = Awaited<ReturnType<typeof getEventsVersions>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetEventsVersionsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsVersions>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getEventsVersions>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEventsVersions<
  TData = Awaited<ReturnType<typeof getEventsVersions>>,
  TError = AxiosError<unknown>,
>(
  params?: GetEventsVersionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsVersions>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEventsVersions>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEventsVersions<
  TData = Awaited<ReturnType<typeof getEventsVersions>>,
  TError = AxiosError<unknown>,
>(
  params?: GetEventsVersionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsVersions>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Event versions
 */

export function useGetEventsVersions<
  TData = Awaited<ReturnType<typeof getEventsVersions>>,
  TError = AxiosError<unknown>,
>(
  params?: GetEventsVersionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsVersions>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetEventsVersionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a single Event version by its id
 * @summary Get a single Event version by its id
 */
export const getEventsVersionsId = (
  id: string,
  params?: GetEventsVersionsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventsVersionResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/events/versions/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetEventsVersionsIdQueryKey = (id: string, params?: GetEventsVersionsIdParams) => {
  return [`http://localhost:3001/api/events/versions/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetEventsVersionsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventsVersionsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetEventsVersionsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventsVersionsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsVersionsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventsVersionsId>>> = ({ signal }) =>
    getEventsVersionsId(id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventsVersionsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEventsVersionsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventsVersionsId>>
>;
export type GetEventsVersionsIdQueryError = AxiosError<NotFoundErrorResponseResponse>;

export function useGetEventsVersionsId<
  TData = Awaited<ReturnType<typeof getEventsVersionsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params: undefined | GetEventsVersionsIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventsVersionsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getEventsVersionsId>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEventsVersionsId<
  TData = Awaited<ReturnType<typeof getEventsVersionsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetEventsVersionsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventsVersionsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEventsVersionsId>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEventsVersionsId<
  TData = Awaited<ReturnType<typeof getEventsVersionsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetEventsVersionsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventsVersionsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a single Event version by its id
 */

export function useGetEventsVersionsId<
  TData = Awaited<ReturnType<typeof getEventsVersionsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetEventsVersionsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventsVersionsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetEventsVersionsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Restore a Event version by its id
 * @summary Restore a Event version by its id
 */
export const postEventsVersionsId = (
  id: string,
  params?: PostEventsVersionsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventsUpsertConfirmationResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/events/versions/${id}`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostEventsVersionsIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postEventsVersionsId>>,
    TError,
    { id: string; params?: PostEventsVersionsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postEventsVersionsId>>,
  TError,
  { id: string; params?: PostEventsVersionsIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postEventsVersionsId>>,
    { id: string; params?: PostEventsVersionsIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return postEventsVersionsId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostEventsVersionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postEventsVersionsId>>
>;

export type PostEventsVersionsIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Restore a Event version by its id
 */
export const usePostEventsVersionsId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postEventsVersionsId>>,
    TError,
    { id: string; params?: PostEventsVersionsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postEventsVersionsId>>,
  TError,
  { id: string; params?: PostEventsVersionsIdParams },
  TContext
> => {
  const mutationOptions = getPostEventsVersionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
