/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * payload
 * A blank template to get started with Payload
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  AccessResponseResponse,
  ConfirmationResponseResponse,
  LoginRequestBody,
  NoUserErrorResponseResponse,
  NotFoundErrorResponseResponse,
  UnauthorizedErrorResponseResponse,
  UnlockRequestBody,
  UsersMeResponseResponse,
} from './model';

/**
 * Data about the current user
 * @summary Current user data
 */
export const getUsersMe = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersMeResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/users/me`, options);
};

export const getGetUsersMeQueryKey = () => {
  return [`http://localhost:3001/api/users/me`] as const;
};

export const getGetUsersMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersMe>>> = ({ signal }) =>
    getUsersMe({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersMeQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersMe>>>;
export type GetUsersMeQueryError = AxiosError<unknown>;

export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>,
      'initialData'
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>,
      'initialData'
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Current user data
 */

export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Login
 * @summary Login
 */
export const postUsersLogin = (
  loginRequestBody: LoginRequestBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersMeResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/users/login`, loginRequestBody, options);
};

export const getPostUsersLoginMutationOptions = <
  TError = AxiosError<UnauthorizedErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersLogin>>,
    TError,
    { data: LoginRequestBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersLogin>>,
  TError,
  { data: LoginRequestBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersLogin>>,
    { data: LoginRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return postUsersLogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersLogin>>>;
export type PostUsersLoginMutationBody = LoginRequestBody;
export type PostUsersLoginMutationError = AxiosError<UnauthorizedErrorResponseResponse>;

/**
 * @summary Login
 */
export const usePostUsersLogin = <
  TError = AxiosError<UnauthorizedErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersLogin>>,
    TError,
    { data: LoginRequestBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsersLogin>>,
  TError,
  { data: LoginRequestBody },
  TContext
> => {
  const mutationOptions = getPostUsersLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Logout
 * @summary Logout
 */
export const postUsersLogout = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ConfirmationResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/users/logout`, undefined, options);
};

export const getPostUsersLogoutMutationOptions = <
  TError = AxiosError<NoUserErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersLogout>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postUsersLogout>>, TError, void, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersLogout>>, void> = () => {
    return postUsersLogout(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersLogout>>
>;

export type PostUsersLogoutMutationError = AxiosError<NoUserErrorResponseResponse>;

/**
 * @summary Logout
 */
export const usePostUsersLogout = <
  TError = AxiosError<NoUserErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersLogout>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postUsersLogout>>, TError, void, TContext> => {
  const mutationOptions = getPostUsersLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Refresh the JWT token
 * @summary Refresh JWT
 */
export const postUsersRefreshToken = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersMeResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/users/refresh-token`, undefined, options);
};

export const getPostUsersRefreshTokenMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersRefreshToken>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersRefreshToken>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersRefreshToken>>,
    void
  > = () => {
    return postUsersRefreshToken(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersRefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersRefreshToken>>
>;

export type PostUsersRefreshTokenMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Refresh JWT
 */
export const usePostUsersRefreshToken = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersRefreshToken>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsersRefreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostUsersRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Unlock account
 * @summary Unlock account
 */
export const postUsersUnlock = (
  unlockRequestBody: UnlockRequestBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ConfirmationResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/users/unlock`, unlockRequestBody, options);
};

export const getPostUsersUnlockMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersUnlock>>,
    TError,
    { data: UnlockRequestBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersUnlock>>,
  TError,
  { data: UnlockRequestBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersUnlock>>,
    { data: UnlockRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return postUsersUnlock(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersUnlockMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersUnlock>>
>;
export type PostUsersUnlockMutationBody = UnlockRequestBody;
export type PostUsersUnlockMutationError = AxiosError<unknown>;

/**
 * @summary Unlock account
 */
export const usePostUsersUnlock = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersUnlock>>,
    TError,
    { data: UnlockRequestBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsersUnlock>>,
  TError,
  { data: UnlockRequestBody },
  TContext
> => {
  const mutationOptions = getPostUsersUnlockMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Lists the user's access per resource
 * @summary Current user's resource access
 */
export const getAccess = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AccessResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/access`, options);
};

export const getGetAccessQueryKey = () => {
  return [`http://localhost:3001/api/access`] as const;
};

export const getGetAccessQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccess>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccess>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccessQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccess>>> = ({ signal }) =>
    getAccess({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccess>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getAccess>>>;
export type GetAccessQueryError = AxiosError<unknown>;

export function useGetAccess<
  TData = Awaited<ReturnType<typeof getAccess>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccess>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getAccess>>, TError, TData>,
      'initialData'
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccess<
  TData = Awaited<ReturnType<typeof getAccess>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccess>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAccess>>, TError, TData>,
      'initialData'
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccess<
  TData = Awaited<ReturnType<typeof getAccess>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccess>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Current user's resource access
 */

export function useGetAccess<
  TData = Awaited<ReturnType<typeof getAccess>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccess>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAccessQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
