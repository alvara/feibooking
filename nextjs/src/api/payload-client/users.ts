/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * payload
 * A blank template to get started with Payload
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  DeleteUsersIdParams,
  DeleteUsersParams,
  GetUsersIdParams,
  GetUsersParams,
  NotFoundErrorResponseResponse,
  PatchUsersIdParams,
  PatchUsersParams,
  PostUsersParams,
  UsersBulkResponseResponse,
  UsersRequestBody,
  UsersResponseResponse,
  UsersUpsertConfirmationResponseResponse,
  UserssResponseResponse,
} from './model';

/**
 * Find paginated Users
 * @summary Find paginated Users
 */
export const getUsers = (
  params?: GetUsersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UserssResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/users`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetUsersQueryKey = (params?: GetUsersParams) => {
  return [`http://localhost:3001/api/users`, ...(params ? [params] : [])] as const;
};

export const getGetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = AxiosError<unknown>,
>(
  params?: GetUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) =>
    getUsers(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>;
export type GetUsersQueryError = AxiosError<unknown>;

export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetUsersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = AxiosError<unknown>,
>(
  params?: GetUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = AxiosError<unknown>,
>(
  params?: GetUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Find paginated Users
 */

export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = AxiosError<unknown>,
>(
  params?: GetUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new User
 * @summary Create a new User
 */
export const postUsers = (
  usersRequestBody: UsersRequestBody,
  params?: PostUsersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersUpsertConfirmationResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/users`, usersRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostUsersMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: UsersRequestBody; params?: PostUsersParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: UsersRequestBody; params?: PostUsersParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsers>>,
    { data: UsersRequestBody; params?: PostUsersParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postUsers(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>;
export type PostUsersMutationBody = UsersRequestBody;
export type PostUsersMutationError = AxiosError<unknown>;

/**
 * @summary Create a new User
 */
export const usePostUsers = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: UsersRequestBody; params?: PostUsersParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: UsersRequestBody; params?: PostUsersParams },
  TContext
> => {
  const mutationOptions = getPostUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update all Users matching the where query
 * @summary Update multiple Users
 */
export const patchUsers = (
  usersRequestBody: UsersRequestBody,
  params: PatchUsersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersBulkResponseResponse>> => {
  return axios.patch(`http://localhost:3001/api/users`, usersRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPatchUsersMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchUsers>>,
    TError,
    { data: UsersRequestBody; params: PatchUsersParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchUsers>>,
  TError,
  { data: UsersRequestBody; params: PatchUsersParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchUsers>>,
    { data: UsersRequestBody; params: PatchUsersParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return patchUsers(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchUsersMutationResult = NonNullable<Awaited<ReturnType<typeof patchUsers>>>;
export type PatchUsersMutationBody = UsersRequestBody;
export type PatchUsersMutationError = AxiosError<unknown>;

/**
 * @summary Update multiple Users
 */
export const usePatchUsers = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchUsers>>,
    TError,
    { data: UsersRequestBody; params: PatchUsersParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchUsers>>,
  TError,
  { data: UsersRequestBody; params: PatchUsersParams },
  TContext
> => {
  const mutationOptions = getPatchUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete all Users matching the where query
 * @summary Delete multiple Users
 */
export const deleteUsers = (
  params: DeleteUsersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersBulkResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/users`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeleteUsersMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsers>>,
    TError,
    { params: DeleteUsersParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUsers>>,
  TError,
  { params: DeleteUsersParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUsers>>,
    { params: DeleteUsersParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteUsers(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUsersMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUsers>>>;

export type DeleteUsersMutationError = AxiosError<unknown>;

/**
 * @summary Delete multiple Users
 */
export const useDeleteUsers = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsers>>,
    TError,
    { params: DeleteUsersParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteUsers>>,
  TError,
  { params: DeleteUsersParams },
  TContext
> => {
  const mutationOptions = getDeleteUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a single User by its id
 * @summary Get a single User by its id
 */
export const getUsersId = (
  id: string,
  params?: GetUsersIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/users/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetUsersIdQueryKey = (id: string, params?: GetUsersIdParams) => {
  return [`http://localhost:3001/api/users/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetUsersIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersId>>> = ({ signal }) =>
    getUsersId(id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersId>>>;
export type GetUsersIdQueryError = AxiosError<NotFoundErrorResponseResponse>;

export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params: undefined | GetUsersIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetUsersIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetUsersIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a single User by its id
 */

export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetUsersIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a User
 * @summary Updates a User
 */
export const patchUsersId = (
  id: string,
  usersRequestBody: UsersRequestBody,
  params?: PatchUsersIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersUpsertConfirmationResponseResponse>> => {
  return axios.patch(`http://localhost:3001/api/users/${id}`, usersRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPatchUsersIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchUsersId>>,
    TError,
    { id: string; data: UsersRequestBody; params?: PatchUsersIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchUsersId>>,
  TError,
  { id: string; data: UsersRequestBody; params?: PatchUsersIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchUsersId>>,
    { id: string; data: UsersRequestBody; params?: PatchUsersIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return patchUsersId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchUsersId>>>;
export type PatchUsersIdMutationBody = UsersRequestBody;
export type PatchUsersIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Updates a User
 */
export const usePatchUsersId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchUsersId>>,
    TError,
    { id: string; data: UsersRequestBody; params?: PatchUsersIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchUsersId>>,
  TError,
  { id: string; data: UsersRequestBody; params?: PatchUsersIdParams },
  TContext
> => {
  const mutationOptions = getPatchUsersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Deletes an existing User
 * @summary Deletes an existing User
 */
export const deleteUsersId = (
  id: string,
  params?: DeleteUsersIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersUpsertConfirmationResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/users/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeleteUsersIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsersId>>,
    TError,
    { id: string; params?: DeleteUsersIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUsersId>>,
  TError,
  { id: string; params?: DeleteUsersIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUsersId>>,
    { id: string; params?: DeleteUsersIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteUsersId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUsersId>>>;

export type DeleteUsersIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Deletes an existing User
 */
export const useDeleteUsersId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsersId>>,
    TError,
    { id: string; params?: DeleteUsersIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteUsersId>>,
  TError,
  { id: string; params?: DeleteUsersIdParams },
  TContext
> => {
  const mutationOptions = getDeleteUsersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
