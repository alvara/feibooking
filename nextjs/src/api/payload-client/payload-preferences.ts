/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * payload
 * A blank template to get started with Payload
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  DeletePayloadPreferencesIdParams,
  DeletePayloadPreferencesKey200,
  DeletePayloadPreferencesParams,
  GetPayloadPreferencesIdParams,
  GetPayloadPreferencesKey200,
  GetPayloadPreferencesParams,
  NotFoundErrorResponseResponse,
  PatchPayloadPreferencesIdParams,
  PatchPayloadPreferencesParams,
  PayloadPreferencesBulkResponseResponse,
  PayloadPreferencesRequestBody,
  PayloadPreferencesResponseResponse,
  PayloadPreferencesUpsertConfirmationResponseResponse,
  PayloadPreferencessResponseResponse,
  PostPayloadPreferencesKey200,
  PostPayloadPreferencesParams,
} from './model';

/**
 * Find paginated Payload Preferences
 * @summary Find paginated Payload Preferences
 */
export const getPayloadPreferences = (
  params?: GetPayloadPreferencesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadPreferencessResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/payload-preferences`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetPayloadPreferencesQueryKey = (params?: GetPayloadPreferencesParams) => {
  return [`http://localhost:3001/api/payload-preferences`, ...(params ? [params] : [])] as const;
};

export const getGetPayloadPreferencesQueryOptions = <
  TData = Awaited<ReturnType<typeof getPayloadPreferences>>,
  TError = AxiosError<unknown>,
>(
  params?: GetPayloadPreferencesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferences>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPayloadPreferencesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPayloadPreferences>>> = ({ signal }) =>
    getPayloadPreferences(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPayloadPreferences>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPayloadPreferencesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPayloadPreferences>>
>;
export type GetPayloadPreferencesQueryError = AxiosError<unknown>;

export function useGetPayloadPreferences<
  TData = Awaited<ReturnType<typeof getPayloadPreferences>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetPayloadPreferencesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferences>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getPayloadPreferences>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPayloadPreferences<
  TData = Awaited<ReturnType<typeof getPayloadPreferences>>,
  TError = AxiosError<unknown>,
>(
  params?: GetPayloadPreferencesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferences>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPayloadPreferences>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPayloadPreferences<
  TData = Awaited<ReturnType<typeof getPayloadPreferences>>,
  TError = AxiosError<unknown>,
>(
  params?: GetPayloadPreferencesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferences>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Find paginated Payload Preferences
 */

export function useGetPayloadPreferences<
  TData = Awaited<ReturnType<typeof getPayloadPreferences>>,
  TError = AxiosError<unknown>,
>(
  params?: GetPayloadPreferencesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferences>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPayloadPreferencesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new Payload Preference
 * @summary Create a new Payload Preference
 */
export const postPayloadPreferences = (
  payloadPreferencesRequestBody: PayloadPreferencesRequestBody,
  params?: PostPayloadPreferencesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadPreferencesUpsertConfirmationResponseResponse>> => {
  return axios.post(
    `http://localhost:3001/api/payload-preferences`,
    payloadPreferencesRequestBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getPostPayloadPreferencesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPayloadPreferences>>,
    TError,
    { data: PayloadPreferencesRequestBody; params?: PostPayloadPreferencesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPayloadPreferences>>,
  TError,
  { data: PayloadPreferencesRequestBody; params?: PostPayloadPreferencesParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPayloadPreferences>>,
    { data: PayloadPreferencesRequestBody; params?: PostPayloadPreferencesParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postPayloadPreferences(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPayloadPreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPayloadPreferences>>
>;
export type PostPayloadPreferencesMutationBody = PayloadPreferencesRequestBody;
export type PostPayloadPreferencesMutationError = AxiosError<unknown>;

/**
 * @summary Create a new Payload Preference
 */
export const usePostPayloadPreferences = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPayloadPreferences>>,
    TError,
    { data: PayloadPreferencesRequestBody; params?: PostPayloadPreferencesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postPayloadPreferences>>,
  TError,
  { data: PayloadPreferencesRequestBody; params?: PostPayloadPreferencesParams },
  TContext
> => {
  const mutationOptions = getPostPayloadPreferencesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update all Payload Preferences matching the where query
 * @summary Update multiple Payload Preferences
 */
export const patchPayloadPreferences = (
  payloadPreferencesRequestBody: PayloadPreferencesRequestBody,
  params: PatchPayloadPreferencesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadPreferencesBulkResponseResponse>> => {
  return axios.patch(
    `http://localhost:3001/api/payload-preferences`,
    payloadPreferencesRequestBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getPatchPayloadPreferencesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchPayloadPreferences>>,
    TError,
    { data: PayloadPreferencesRequestBody; params: PatchPayloadPreferencesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchPayloadPreferences>>,
  TError,
  { data: PayloadPreferencesRequestBody; params: PatchPayloadPreferencesParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchPayloadPreferences>>,
    { data: PayloadPreferencesRequestBody; params: PatchPayloadPreferencesParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return patchPayloadPreferences(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchPayloadPreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchPayloadPreferences>>
>;
export type PatchPayloadPreferencesMutationBody = PayloadPreferencesRequestBody;
export type PatchPayloadPreferencesMutationError = AxiosError<unknown>;

/**
 * @summary Update multiple Payload Preferences
 */
export const usePatchPayloadPreferences = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchPayloadPreferences>>,
    TError,
    { data: PayloadPreferencesRequestBody; params: PatchPayloadPreferencesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchPayloadPreferences>>,
  TError,
  { data: PayloadPreferencesRequestBody; params: PatchPayloadPreferencesParams },
  TContext
> => {
  const mutationOptions = getPatchPayloadPreferencesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete all Payload Preferences matching the where query
 * @summary Delete multiple Payload Preferences
 */
export const deletePayloadPreferences = (
  params: DeletePayloadPreferencesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadPreferencesBulkResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/payload-preferences`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeletePayloadPreferencesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePayloadPreferences>>,
    TError,
    { params: DeletePayloadPreferencesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePayloadPreferences>>,
  TError,
  { params: DeletePayloadPreferencesParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePayloadPreferences>>,
    { params: DeletePayloadPreferencesParams }
  > = (props) => {
    const { params } = props ?? {};

    return deletePayloadPreferences(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePayloadPreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePayloadPreferences>>
>;

export type DeletePayloadPreferencesMutationError = AxiosError<unknown>;

/**
 * @summary Delete multiple Payload Preferences
 */
export const useDeletePayloadPreferences = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePayloadPreferences>>,
    TError,
    { params: DeletePayloadPreferencesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deletePayloadPreferences>>,
  TError,
  { params: DeletePayloadPreferencesParams },
  TContext
> => {
  const mutationOptions = getDeletePayloadPreferencesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a single Payload Preference by its id
 * @summary Get a single Payload Preference by its id
 */
export const getPayloadPreferencesId = (
  id: string,
  params?: GetPayloadPreferencesIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadPreferencesResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/payload-preferences/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetPayloadPreferencesIdQueryKey = (
  id: string,
  params?: GetPayloadPreferencesIdParams,
) => {
  return [
    `http://localhost:3001/api/payload-preferences/${id}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPayloadPreferencesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPayloadPreferencesId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetPayloadPreferencesIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferencesId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPayloadPreferencesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPayloadPreferencesId>>> = ({
    signal,
  }) => getPayloadPreferencesId(id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPayloadPreferencesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPayloadPreferencesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPayloadPreferencesId>>
>;
export type GetPayloadPreferencesIdQueryError = AxiosError<NotFoundErrorResponseResponse>;

export function useGetPayloadPreferencesId<
  TData = Awaited<ReturnType<typeof getPayloadPreferencesId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params: undefined | GetPayloadPreferencesIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferencesId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPayloadPreferencesId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPayloadPreferencesId<
  TData = Awaited<ReturnType<typeof getPayloadPreferencesId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetPayloadPreferencesIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferencesId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPayloadPreferencesId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPayloadPreferencesId<
  TData = Awaited<ReturnType<typeof getPayloadPreferencesId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetPayloadPreferencesIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferencesId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a single Payload Preference by its id
 */

export function useGetPayloadPreferencesId<
  TData = Awaited<ReturnType<typeof getPayloadPreferencesId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetPayloadPreferencesIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferencesId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPayloadPreferencesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a Payload Preference
 * @summary Updates a Payload Preference
 */
export const patchPayloadPreferencesId = (
  id: string,
  payloadPreferencesRequestBody: PayloadPreferencesRequestBody,
  params?: PatchPayloadPreferencesIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadPreferencesUpsertConfirmationResponseResponse>> => {
  return axios.patch(
    `http://localhost:3001/api/payload-preferences/${id}`,
    payloadPreferencesRequestBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getPatchPayloadPreferencesIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchPayloadPreferencesId>>,
    TError,
    { id: string; data: PayloadPreferencesRequestBody; params?: PatchPayloadPreferencesIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchPayloadPreferencesId>>,
  TError,
  { id: string; data: PayloadPreferencesRequestBody; params?: PatchPayloadPreferencesIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchPayloadPreferencesId>>,
    { id: string; data: PayloadPreferencesRequestBody; params?: PatchPayloadPreferencesIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return patchPayloadPreferencesId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchPayloadPreferencesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchPayloadPreferencesId>>
>;
export type PatchPayloadPreferencesIdMutationBody = PayloadPreferencesRequestBody;
export type PatchPayloadPreferencesIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Updates a Payload Preference
 */
export const usePatchPayloadPreferencesId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchPayloadPreferencesId>>,
    TError,
    { id: string; data: PayloadPreferencesRequestBody; params?: PatchPayloadPreferencesIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchPayloadPreferencesId>>,
  TError,
  { id: string; data: PayloadPreferencesRequestBody; params?: PatchPayloadPreferencesIdParams },
  TContext
> => {
  const mutationOptions = getPatchPayloadPreferencesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Deletes an existing Payload Preference
 * @summary Deletes an existing Payload Preference
 */
export const deletePayloadPreferencesId = (
  id: string,
  params?: DeletePayloadPreferencesIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PayloadPreferencesUpsertConfirmationResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/payload-preferences/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeletePayloadPreferencesIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePayloadPreferencesId>>,
    TError,
    { id: string; params?: DeletePayloadPreferencesIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePayloadPreferencesId>>,
  TError,
  { id: string; params?: DeletePayloadPreferencesIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePayloadPreferencesId>>,
    { id: string; params?: DeletePayloadPreferencesIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deletePayloadPreferencesId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePayloadPreferencesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePayloadPreferencesId>>
>;

export type DeletePayloadPreferencesIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Deletes an existing Payload Preference
 */
export const useDeletePayloadPreferencesId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePayloadPreferencesId>>,
    TError,
    { id: string; params?: DeletePayloadPreferencesIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deletePayloadPreferencesId>>,
  TError,
  { id: string; params?: DeletePayloadPreferencesIdParams },
  TContext
> => {
  const mutationOptions = getDeletePayloadPreferencesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * custom operation
 * @summary custom operation
 */
export const getPayloadPreferencesKey = (
  key: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetPayloadPreferencesKey200>> => {
  return axios.get(`http://localhost:3001/api/payload-preferences/${key}`, options);
};

export const getGetPayloadPreferencesKeyQueryKey = (key: string) => {
  return [`http://localhost:3001/api/payload-preferences/${key}`] as const;
};

export const getGetPayloadPreferencesKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getPayloadPreferencesKey>>,
  TError = AxiosError<unknown>,
>(
  key: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferencesKey>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPayloadPreferencesKeyQueryKey(key);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPayloadPreferencesKey>>> = ({
    signal,
  }) => getPayloadPreferencesKey(key, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!key, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPayloadPreferencesKey>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPayloadPreferencesKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPayloadPreferencesKey>>
>;
export type GetPayloadPreferencesKeyQueryError = AxiosError<unknown>;

export function useGetPayloadPreferencesKey<
  TData = Awaited<ReturnType<typeof getPayloadPreferencesKey>>,
  TError = AxiosError<unknown>,
>(
  key: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferencesKey>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPayloadPreferencesKey>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPayloadPreferencesKey<
  TData = Awaited<ReturnType<typeof getPayloadPreferencesKey>>,
  TError = AxiosError<unknown>,
>(
  key: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferencesKey>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPayloadPreferencesKey>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPayloadPreferencesKey<
  TData = Awaited<ReturnType<typeof getPayloadPreferencesKey>>,
  TError = AxiosError<unknown>,
>(
  key: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferencesKey>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary custom operation
 */

export function useGetPayloadPreferencesKey<
  TData = Awaited<ReturnType<typeof getPayloadPreferencesKey>>,
  TError = AxiosError<unknown>,
>(
  key: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPayloadPreferencesKey>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPayloadPreferencesKeyQueryOptions(key, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * custom operation
 * @summary custom operation
 */
export const deletePayloadPreferencesKey = (
  key: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DeletePayloadPreferencesKey200>> => {
  return axios.delete(`http://localhost:3001/api/payload-preferences/${key}`, options);
};

export const getDeletePayloadPreferencesKeyMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePayloadPreferencesKey>>,
    TError,
    { key: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePayloadPreferencesKey>>,
  TError,
  { key: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePayloadPreferencesKey>>,
    { key: string }
  > = (props) => {
    const { key } = props ?? {};

    return deletePayloadPreferencesKey(key, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePayloadPreferencesKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePayloadPreferencesKey>>
>;

export type DeletePayloadPreferencesKeyMutationError = AxiosError<unknown>;

/**
 * @summary custom operation
 */
export const useDeletePayloadPreferencesKey = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePayloadPreferencesKey>>,
    TError,
    { key: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deletePayloadPreferencesKey>>,
  TError,
  { key: string },
  TContext
> => {
  const mutationOptions = getDeletePayloadPreferencesKeyMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * custom operation
 * @summary custom operation
 */
export const postPayloadPreferencesKey = (
  key: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostPayloadPreferencesKey200>> => {
  return axios.post(`http://localhost:3001/api/payload-preferences/${key}`, undefined, options);
};

export const getPostPayloadPreferencesKeyMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPayloadPreferencesKey>>,
    TError,
    { key: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPayloadPreferencesKey>>,
  TError,
  { key: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPayloadPreferencesKey>>,
    { key: string }
  > = (props) => {
    const { key } = props ?? {};

    return postPayloadPreferencesKey(key, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPayloadPreferencesKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPayloadPreferencesKey>>
>;

export type PostPayloadPreferencesKeyMutationError = AxiosError<unknown>;

/**
 * @summary custom operation
 */
export const usePostPayloadPreferencesKey = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPayloadPreferencesKey>>,
    TError,
    { key: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postPayloadPreferencesKey>>,
  TError,
  { key: string },
  TContext
> => {
  const mutationOptions = getPostPayloadPreferencesKeyMutationOptions(options);

  return useMutation(mutationOptions);
};
