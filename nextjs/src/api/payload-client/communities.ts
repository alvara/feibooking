/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * payload
 * A blank template to get started with Payload
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  CommunitiesBulkResponseResponse,
  CommunitiesRequestBody,
  CommunitiesResponseResponse,
  CommunitiesUpsertConfirmationResponseResponse,
  CommunitiesVersionResponseResponse,
  CommunitiesVersionsResponseResponse,
  CommunitiessResponseResponse,
  DeleteCommunitiesIdParams,
  DeleteCommunitiesParams,
  GetCommunitiesIdParams,
  GetCommunitiesParams,
  GetCommunitiesVersionsIdParams,
  GetCommunitiesVersionsParams,
  NotFoundErrorResponseResponse,
  PatchCommunitiesIdParams,
  PatchCommunitiesParams,
  PostCommunitiesParams,
  PostCommunitiesVersionsIdParams,
} from './model';

/**
 * Find paginated Communities
 * @summary Find paginated Communities
 */
export const getCommunities = (
  params?: GetCommunitiesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommunitiessResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/communities`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCommunitiesQueryKey = (params?: GetCommunitiesParams) => {
  return [`http://localhost:3001/api/communities`, ...(params ? [params] : [])] as const;
};

export const getGetCommunitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommunities>>,
  TError = AxiosError<unknown>,
>(
  params?: GetCommunitiesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCommunitiesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommunities>>> = ({ signal }) =>
    getCommunities(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommunities>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCommunitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getCommunities>>>;
export type GetCommunitiesQueryError = AxiosError<unknown>;

export function useGetCommunities<
  TData = Awaited<ReturnType<typeof getCommunities>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetCommunitiesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCommunities<
  TData = Awaited<ReturnType<typeof getCommunities>>,
  TError = AxiosError<unknown>,
>(
  params?: GetCommunitiesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCommunities<
  TData = Awaited<ReturnType<typeof getCommunities>>,
  TError = AxiosError<unknown>,
>(
  params?: GetCommunitiesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Find paginated Communities
 */

export function useGetCommunities<
  TData = Awaited<ReturnType<typeof getCommunities>>,
  TError = AxiosError<unknown>,
>(
  params?: GetCommunitiesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCommunitiesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new Community
 * @summary Create a new Community
 */
export const postCommunities = (
  communitiesRequestBody: CommunitiesRequestBody,
  params?: PostCommunitiesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommunitiesUpsertConfirmationResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/communities`, communitiesRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostCommunitiesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommunities>>,
    TError,
    { data: CommunitiesRequestBody; params?: PostCommunitiesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommunities>>,
  TError,
  { data: CommunitiesRequestBody; params?: PostCommunitiesParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommunities>>,
    { data: CommunitiesRequestBody; params?: PostCommunitiesParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCommunities(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommunitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommunities>>
>;
export type PostCommunitiesMutationBody = CommunitiesRequestBody;
export type PostCommunitiesMutationError = AxiosError<unknown>;

/**
 * @summary Create a new Community
 */
export const usePostCommunities = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommunities>>,
    TError,
    { data: CommunitiesRequestBody; params?: PostCommunitiesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCommunities>>,
  TError,
  { data: CommunitiesRequestBody; params?: PostCommunitiesParams },
  TContext
> => {
  const mutationOptions = getPostCommunitiesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update all Communities matching the where query
 * @summary Update multiple Communities
 */
export const patchCommunities = (
  communitiesRequestBody: CommunitiesRequestBody,
  params: PatchCommunitiesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommunitiesBulkResponseResponse>> => {
  return axios.patch(`http://localhost:3001/api/communities`, communitiesRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPatchCommunitiesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchCommunities>>,
    TError,
    { data: CommunitiesRequestBody; params: PatchCommunitiesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchCommunities>>,
  TError,
  { data: CommunitiesRequestBody; params: PatchCommunitiesParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchCommunities>>,
    { data: CommunitiesRequestBody; params: PatchCommunitiesParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return patchCommunities(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchCommunitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchCommunities>>
>;
export type PatchCommunitiesMutationBody = CommunitiesRequestBody;
export type PatchCommunitiesMutationError = AxiosError<unknown>;

/**
 * @summary Update multiple Communities
 */
export const usePatchCommunities = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchCommunities>>,
    TError,
    { data: CommunitiesRequestBody; params: PatchCommunitiesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchCommunities>>,
  TError,
  { data: CommunitiesRequestBody; params: PatchCommunitiesParams },
  TContext
> => {
  const mutationOptions = getPatchCommunitiesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete all Communities matching the where query
 * @summary Delete multiple Communities
 */
export const deleteCommunities = (
  params: DeleteCommunitiesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommunitiesBulkResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/communities`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeleteCommunitiesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCommunities>>,
    TError,
    { params: DeleteCommunitiesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCommunities>>,
  TError,
  { params: DeleteCommunitiesParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCommunities>>,
    { params: DeleteCommunitiesParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteCommunities(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCommunitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCommunities>>
>;

export type DeleteCommunitiesMutationError = AxiosError<unknown>;

/**
 * @summary Delete multiple Communities
 */
export const useDeleteCommunities = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCommunities>>,
    TError,
    { params: DeleteCommunitiesParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCommunities>>,
  TError,
  { params: DeleteCommunitiesParams },
  TContext
> => {
  const mutationOptions = getDeleteCommunitiesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a single Community by its id
 * @summary Get a single Community by its id
 */
export const getCommunitiesId = (
  id: string,
  params?: GetCommunitiesIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommunitiesResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/communities/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCommunitiesIdQueryKey = (id: string, params?: GetCommunitiesIdParams) => {
  return [`http://localhost:3001/api/communities/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetCommunitiesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommunitiesId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetCommunitiesIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCommunitiesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommunitiesId>>> = ({ signal }) =>
    getCommunitiesId(id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommunitiesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCommunitiesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCommunitiesId>>>;
export type GetCommunitiesIdQueryError = AxiosError<NotFoundErrorResponseResponse>;

export function useGetCommunitiesId<
  TData = Awaited<ReturnType<typeof getCommunitiesId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params: undefined | GetCommunitiesIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getCommunitiesId>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCommunitiesId<
  TData = Awaited<ReturnType<typeof getCommunitiesId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetCommunitiesIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getCommunitiesId>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCommunitiesId<
  TData = Awaited<ReturnType<typeof getCommunitiesId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetCommunitiesIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a single Community by its id
 */

export function useGetCommunitiesId<
  TData = Awaited<ReturnType<typeof getCommunitiesId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetCommunitiesIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCommunitiesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a Community
 * @summary Updates a Community
 */
export const patchCommunitiesId = (
  id: string,
  communitiesRequestBody: CommunitiesRequestBody,
  params?: PatchCommunitiesIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommunitiesUpsertConfirmationResponseResponse>> => {
  return axios.patch(`http://localhost:3001/api/communities/${id}`, communitiesRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPatchCommunitiesIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchCommunitiesId>>,
    TError,
    { id: string; data: CommunitiesRequestBody; params?: PatchCommunitiesIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchCommunitiesId>>,
  TError,
  { id: string; data: CommunitiesRequestBody; params?: PatchCommunitiesIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchCommunitiesId>>,
    { id: string; data: CommunitiesRequestBody; params?: PatchCommunitiesIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return patchCommunitiesId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchCommunitiesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchCommunitiesId>>
>;
export type PatchCommunitiesIdMutationBody = CommunitiesRequestBody;
export type PatchCommunitiesIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Updates a Community
 */
export const usePatchCommunitiesId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchCommunitiesId>>,
    TError,
    { id: string; data: CommunitiesRequestBody; params?: PatchCommunitiesIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchCommunitiesId>>,
  TError,
  { id: string; data: CommunitiesRequestBody; params?: PatchCommunitiesIdParams },
  TContext
> => {
  const mutationOptions = getPatchCommunitiesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Deletes an existing Community
 * @summary Deletes an existing Community
 */
export const deleteCommunitiesId = (
  id: string,
  params?: DeleteCommunitiesIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommunitiesUpsertConfirmationResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/communities/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeleteCommunitiesIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCommunitiesId>>,
    TError,
    { id: string; params?: DeleteCommunitiesIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCommunitiesId>>,
  TError,
  { id: string; params?: DeleteCommunitiesIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCommunitiesId>>,
    { id: string; params?: DeleteCommunitiesIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteCommunitiesId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCommunitiesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCommunitiesId>>
>;

export type DeleteCommunitiesIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Deletes an existing Community
 */
export const useDeleteCommunitiesId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCommunitiesId>>,
    TError,
    { id: string; params?: DeleteCommunitiesIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCommunitiesId>>,
  TError,
  { id: string; params?: DeleteCommunitiesIdParams },
  TContext
> => {
  const mutationOptions = getDeleteCommunitiesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Find and query paginated versions of Communities
 * @summary Community versions
 */
export const getCommunitiesVersions = (
  params?: GetCommunitiesVersionsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommunitiesVersionsResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/communities/versions`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCommunitiesVersionsQueryKey = (params?: GetCommunitiesVersionsParams) => {
  return [`http://localhost:3001/api/communities/versions`, ...(params ? [params] : [])] as const;
};

export const getGetCommunitiesVersionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommunitiesVersions>>,
  TError = AxiosError<unknown>,
>(
  params?: GetCommunitiesVersionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesVersions>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCommunitiesVersionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommunitiesVersions>>> = ({ signal }) =>
    getCommunitiesVersions(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommunitiesVersions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCommunitiesVersionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommunitiesVersions>>
>;
export type GetCommunitiesVersionsQueryError = AxiosError<unknown>;

export function useGetCommunitiesVersions<
  TData = Awaited<ReturnType<typeof getCommunitiesVersions>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetCommunitiesVersionsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesVersions>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunitiesVersions>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCommunitiesVersions<
  TData = Awaited<ReturnType<typeof getCommunitiesVersions>>,
  TError = AxiosError<unknown>,
>(
  params?: GetCommunitiesVersionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesVersions>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunitiesVersions>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCommunitiesVersions<
  TData = Awaited<ReturnType<typeof getCommunitiesVersions>>,
  TError = AxiosError<unknown>,
>(
  params?: GetCommunitiesVersionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesVersions>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Community versions
 */

export function useGetCommunitiesVersions<
  TData = Awaited<ReturnType<typeof getCommunitiesVersions>>,
  TError = AxiosError<unknown>,
>(
  params?: GetCommunitiesVersionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesVersions>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCommunitiesVersionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a single Community version by its id
 * @summary Get a single Community version by its id
 */
export const getCommunitiesVersionsId = (
  id: string,
  params?: GetCommunitiesVersionsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommunitiesVersionResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/communities/versions/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCommunitiesVersionsIdQueryKey = (
  id: string,
  params?: GetCommunitiesVersionsIdParams,
) => {
  return [
    `http://localhost:3001/api/communities/versions/${id}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetCommunitiesVersionsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommunitiesVersionsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetCommunitiesVersionsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesVersionsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCommunitiesVersionsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommunitiesVersionsId>>> = ({
    signal,
  }) => getCommunitiesVersionsId(id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommunitiesVersionsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCommunitiesVersionsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommunitiesVersionsId>>
>;
export type GetCommunitiesVersionsIdQueryError = AxiosError<NotFoundErrorResponseResponse>;

export function useGetCommunitiesVersionsId<
  TData = Awaited<ReturnType<typeof getCommunitiesVersionsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params: undefined | GetCommunitiesVersionsIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesVersionsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunitiesVersionsId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCommunitiesVersionsId<
  TData = Awaited<ReturnType<typeof getCommunitiesVersionsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetCommunitiesVersionsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesVersionsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunitiesVersionsId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCommunitiesVersionsId<
  TData = Awaited<ReturnType<typeof getCommunitiesVersionsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetCommunitiesVersionsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesVersionsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a single Community version by its id
 */

export function useGetCommunitiesVersionsId<
  TData = Awaited<ReturnType<typeof getCommunitiesVersionsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetCommunitiesVersionsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunitiesVersionsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCommunitiesVersionsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Restore a Community version by its id
 * @summary Restore a Community version by its id
 */
export const postCommunitiesVersionsId = (
  id: string,
  params?: PostCommunitiesVersionsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommunitiesUpsertConfirmationResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/communities/versions/${id}`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostCommunitiesVersionsIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommunitiesVersionsId>>,
    TError,
    { id: string; params?: PostCommunitiesVersionsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommunitiesVersionsId>>,
  TError,
  { id: string; params?: PostCommunitiesVersionsIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommunitiesVersionsId>>,
    { id: string; params?: PostCommunitiesVersionsIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return postCommunitiesVersionsId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommunitiesVersionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommunitiesVersionsId>>
>;

export type PostCommunitiesVersionsIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Restore a Community version by its id
 */
export const usePostCommunitiesVersionsId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommunitiesVersionsId>>,
    TError,
    { id: string; params?: PostCommunitiesVersionsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCommunitiesVersionsId>>,
  TError,
  { id: string; params?: PostCommunitiesVersionsIdParams },
  TContext
> => {
  const mutationOptions = getPostCommunitiesVersionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
