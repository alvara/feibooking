/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * payload
 * A blank template to get started with Payload
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  DeleteImageUploadsIdParams,
  DeleteImageUploadsParams,
  GetImageUploadsIdParams,
  GetImageUploadsParams,
  ImageUploadsBulkResponseResponse,
  ImageUploadsRequestBody,
  ImageUploadsResponseResponse,
  ImageUploadsUpsertConfirmationResponseResponse,
  ImageUploadssResponseResponse,
  NotFoundErrorResponseResponse,
  PatchImageUploadsIdParams,
  PatchImageUploadsParams,
  PostImageUploadsParams,
} from './model';

/**
 * Find paginated Image Uploads
 * @summary Find paginated Image Uploads
 */
export const getImageUploads = (
  params?: GetImageUploadsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ImageUploadssResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/imageUploads`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetImageUploadsQueryKey = (params?: GetImageUploadsParams) => {
  return [`http://localhost:3001/api/imageUploads`, ...(params ? [params] : [])] as const;
};

export const getGetImageUploadsQueryOptions = <
  TData = Awaited<ReturnType<typeof getImageUploads>>,
  TError = AxiosError<unknown>,
>(
  params?: GetImageUploadsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getImageUploads>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetImageUploadsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getImageUploads>>> = ({ signal }) =>
    getImageUploads(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getImageUploads>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetImageUploadsQueryResult = NonNullable<Awaited<ReturnType<typeof getImageUploads>>>;
export type GetImageUploadsQueryError = AxiosError<unknown>;

export function useGetImageUploads<
  TData = Awaited<ReturnType<typeof getImageUploads>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetImageUploadsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getImageUploads>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getImageUploads>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetImageUploads<
  TData = Awaited<ReturnType<typeof getImageUploads>>,
  TError = AxiosError<unknown>,
>(
  params?: GetImageUploadsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getImageUploads>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getImageUploads>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetImageUploads<
  TData = Awaited<ReturnType<typeof getImageUploads>>,
  TError = AxiosError<unknown>,
>(
  params?: GetImageUploadsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getImageUploads>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Find paginated Image Uploads
 */

export function useGetImageUploads<
  TData = Awaited<ReturnType<typeof getImageUploads>>,
  TError = AxiosError<unknown>,
>(
  params?: GetImageUploadsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getImageUploads>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetImageUploadsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new Image Upload
 * @summary Create a new Image Upload
 */
export const postImageUploads = (
  imageUploadsRequestBody: ImageUploadsRequestBody,
  params?: PostImageUploadsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ImageUploadsUpsertConfirmationResponseResponse>> => {
  return axios.post(`http://localhost:3001/api/imageUploads`, imageUploadsRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostImageUploadsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postImageUploads>>,
    TError,
    { data: ImageUploadsRequestBody; params?: PostImageUploadsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postImageUploads>>,
  TError,
  { data: ImageUploadsRequestBody; params?: PostImageUploadsParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postImageUploads>>,
    { data: ImageUploadsRequestBody; params?: PostImageUploadsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postImageUploads(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostImageUploadsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postImageUploads>>
>;
export type PostImageUploadsMutationBody = ImageUploadsRequestBody;
export type PostImageUploadsMutationError = AxiosError<unknown>;

/**
 * @summary Create a new Image Upload
 */
export const usePostImageUploads = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postImageUploads>>,
    TError,
    { data: ImageUploadsRequestBody; params?: PostImageUploadsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postImageUploads>>,
  TError,
  { data: ImageUploadsRequestBody; params?: PostImageUploadsParams },
  TContext
> => {
  const mutationOptions = getPostImageUploadsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update all Image Uploads matching the where query
 * @summary Update multiple Image Uploads
 */
export const patchImageUploads = (
  imageUploadsRequestBody: ImageUploadsRequestBody,
  params: PatchImageUploadsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ImageUploadsBulkResponseResponse>> => {
  return axios.patch(`http://localhost:3001/api/imageUploads`, imageUploadsRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPatchImageUploadsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchImageUploads>>,
    TError,
    { data: ImageUploadsRequestBody; params: PatchImageUploadsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchImageUploads>>,
  TError,
  { data: ImageUploadsRequestBody; params: PatchImageUploadsParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchImageUploads>>,
    { data: ImageUploadsRequestBody; params: PatchImageUploadsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return patchImageUploads(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchImageUploadsMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchImageUploads>>
>;
export type PatchImageUploadsMutationBody = ImageUploadsRequestBody;
export type PatchImageUploadsMutationError = AxiosError<unknown>;

/**
 * @summary Update multiple Image Uploads
 */
export const usePatchImageUploads = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchImageUploads>>,
    TError,
    { data: ImageUploadsRequestBody; params: PatchImageUploadsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchImageUploads>>,
  TError,
  { data: ImageUploadsRequestBody; params: PatchImageUploadsParams },
  TContext
> => {
  const mutationOptions = getPatchImageUploadsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete all Image Uploads matching the where query
 * @summary Delete multiple Image Uploads
 */
export const deleteImageUploads = (
  params: DeleteImageUploadsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ImageUploadsBulkResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/imageUploads`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeleteImageUploadsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteImageUploads>>,
    TError,
    { params: DeleteImageUploadsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteImageUploads>>,
  TError,
  { params: DeleteImageUploadsParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteImageUploads>>,
    { params: DeleteImageUploadsParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteImageUploads(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteImageUploadsMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteImageUploads>>
>;

export type DeleteImageUploadsMutationError = AxiosError<unknown>;

/**
 * @summary Delete multiple Image Uploads
 */
export const useDeleteImageUploads = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteImageUploads>>,
    TError,
    { params: DeleteImageUploadsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteImageUploads>>,
  TError,
  { params: DeleteImageUploadsParams },
  TContext
> => {
  const mutationOptions = getDeleteImageUploadsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a single Image Upload by its id
 * @summary Get a single Image Upload by its id
 */
export const getImageUploadsId = (
  id: string,
  params?: GetImageUploadsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ImageUploadsResponseResponse>> => {
  return axios.get(`http://localhost:3001/api/imageUploads/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetImageUploadsIdQueryKey = (id: string, params?: GetImageUploadsIdParams) => {
  return [`http://localhost:3001/api/imageUploads/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetImageUploadsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getImageUploadsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetImageUploadsIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getImageUploadsId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetImageUploadsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getImageUploadsId>>> = ({ signal }) =>
    getImageUploadsId(id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getImageUploadsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetImageUploadsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getImageUploadsId>>
>;
export type GetImageUploadsIdQueryError = AxiosError<NotFoundErrorResponseResponse>;

export function useGetImageUploadsId<
  TData = Awaited<ReturnType<typeof getImageUploadsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params: undefined | GetImageUploadsIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getImageUploadsId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getImageUploadsId>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetImageUploadsId<
  TData = Awaited<ReturnType<typeof getImageUploadsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetImageUploadsIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getImageUploadsId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getImageUploadsId>>, TError, TData>,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetImageUploadsId<
  TData = Awaited<ReturnType<typeof getImageUploadsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetImageUploadsIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getImageUploadsId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a single Image Upload by its id
 */

export function useGetImageUploadsId<
  TData = Awaited<ReturnType<typeof getImageUploadsId>>,
  TError = AxiosError<NotFoundErrorResponseResponse>,
>(
  id: string,
  params?: GetImageUploadsIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getImageUploadsId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetImageUploadsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a Image Upload
 * @summary Updates a Image Upload
 */
export const patchImageUploadsId = (
  id: string,
  imageUploadsRequestBody: ImageUploadsRequestBody,
  params?: PatchImageUploadsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ImageUploadsUpsertConfirmationResponseResponse>> => {
  return axios.patch(`http://localhost:3001/api/imageUploads/${id}`, imageUploadsRequestBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPatchImageUploadsIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchImageUploadsId>>,
    TError,
    { id: string; data: ImageUploadsRequestBody; params?: PatchImageUploadsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchImageUploadsId>>,
  TError,
  { id: string; data: ImageUploadsRequestBody; params?: PatchImageUploadsIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchImageUploadsId>>,
    { id: string; data: ImageUploadsRequestBody; params?: PatchImageUploadsIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return patchImageUploadsId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchImageUploadsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchImageUploadsId>>
>;
export type PatchImageUploadsIdMutationBody = ImageUploadsRequestBody;
export type PatchImageUploadsIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Updates a Image Upload
 */
export const usePatchImageUploadsId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchImageUploadsId>>,
    TError,
    { id: string; data: ImageUploadsRequestBody; params?: PatchImageUploadsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchImageUploadsId>>,
  TError,
  { id: string; data: ImageUploadsRequestBody; params?: PatchImageUploadsIdParams },
  TContext
> => {
  const mutationOptions = getPatchImageUploadsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Deletes an existing Image Upload
 * @summary Deletes an existing Image Upload
 */
export const deleteImageUploadsId = (
  id: string,
  params?: DeleteImageUploadsIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ImageUploadsUpsertConfirmationResponseResponse>> => {
  return axios.delete(`http://localhost:3001/api/imageUploads/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeleteImageUploadsIdMutationOptions = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteImageUploadsId>>,
    TError,
    { id: string; params?: DeleteImageUploadsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteImageUploadsId>>,
  TError,
  { id: string; params?: DeleteImageUploadsIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteImageUploadsId>>,
    { id: string; params?: DeleteImageUploadsIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteImageUploadsId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteImageUploadsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteImageUploadsId>>
>;

export type DeleteImageUploadsIdMutationError = AxiosError<NotFoundErrorResponseResponse>;

/**
 * @summary Deletes an existing Image Upload
 */
export const useDeleteImageUploadsId = <
  TError = AxiosError<NotFoundErrorResponseResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteImageUploadsId>>,
    TError,
    { id: string; params?: DeleteImageUploadsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteImageUploadsId>>,
  TError,
  { id: string; params?: DeleteImageUploadsIdParams },
  TContext
> => {
  const mutationOptions = getDeleteImageUploadsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
